{"version":3,"file":"react-video-cover.cjs.production.min.js","sources":["../src/VideoCoverFallback.tsx","../src/index.tsx"],"sourcesContent":["import React, { Component, CSSProperties, SyntheticEvent } from \"react\";\n\nimport { Props } from \"./index\";\n\ntype State = {\n  innerRatio: number;\n  outerRatio: number;\n};\n\nexport default class VideoCoverFallback extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      innerRatio: 0,\n      outerRatio: 0,\n    };\n    this.updateContainerRatio = this.updateContainerRatio.bind(this);\n    this.updateVideoRatio = this.updateVideoRatio.bind(this);\n    this.initEventListeners = this.initEventListeners.bind(this);\n    this.removeEventListeners = this.removeEventListeners.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateContainerRatio();\n    if (typeof this.props.onFallbackDidMount === \"function\") {\n      this.props.onFallbackDidMount(this.updateContainerRatio);\n    }\n    if (this.props.remeasureOnWindowResize) {\n      this.initEventListeners();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.remeasureOnWindowResize !== this.props.remeasureOnWindowResize\n    ) {\n      if (nextProps.remeasureOnWindowResize) {\n        this.initEventListeners();\n      } else {\n        this.removeEventListeners();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeEventListeners();\n    if (typeof this.props.onFallbackWillUnmount === \"function\") {\n      this.props.onFallbackWillUnmount();\n    }\n  }\n\n  updateContainerRatio() {\n    if (this.containerRef) {\n      const { width, height } = this.containerRef.getBoundingClientRect();\n      this.setState({\n        outerRatio: width / height,\n      });\n    }\n  }\n\n  updateVideoRatio(width: number, height: number) {\n    this.setState({\n      innerRatio: width / height,\n    });\n  }\n\n  initEventListeners() {\n    window.addEventListener(\"resize\", this.updateContainerRatio);\n  }\n\n  removeEventListeners() {\n    window.removeEventListener(\"resize\", this.updateContainerRatio);\n  }\n\n  private containerRef: HTMLElement | null = null;\n\n  /**\n   * We can get the width and height of a video after it has started loading.\n   * Then we can compare the aspect ratio of the video to that of it's surrounding container.\n   * That is all we need to determine if the video fills the container vertically or horizontally.\n   * In the other dimension we just have to maintain the original aspect-ratio.\n   */\n  render() {\n    const { innerRatio, outerRatio } = this.state;\n    const style: CSSProperties = {\n      width: innerRatio > outerRatio ? \"auto\" : \"100%\",\n      height: innerRatio > outerRatio ? \"100%\" : \"auto\",\n\n      /* the following is for centering the video.\n      There has to be some better solution?!\n      any help is very much appreciated :) */\n      position: \"absolute\",\n      top: -9999,\n      bottom: -9999,\n      left: -9999,\n      right: -9999,\n      margin: \"auto\",\n    };\n\n    const outerStyle: CSSProperties = {\n      width: \"100%\",\n      height: \"100%\",\n      ...this.props.style,\n      position: \"relative\",\n      overflow: \"hidden\",\n    };\n\n    return (\n      <div\n        style={outerStyle}\n        ref={(element) => {\n          this.containerRef = element;\n        }}\n        className={this.props.className}\n      >\n        <video\n          onLoadedData={(event: SyntheticEvent<HTMLVideoElement>) => {\n            this.updateVideoRatio(\n              event.currentTarget.videoWidth,\n              event.currentTarget.videoHeight\n            );\n          }}\n          style={style}\n          {...this.props.videoOptions}\n        />\n      </div>\n    );\n  }\n}\n\n","import React, { Component, CSSProperties } from \"react\";\n\nimport CoverFallback from \"./VideoCoverFallback\";\n\nexport type Props = {\n  /**\n   * This component will use object-fit: cover if available,\n   * that is in all modern browsers except IE.\n   * This prop forces use of the fallback. This is helpful during troubleshooting,\n   * but apart from that you should not use it.\n   * default: false\n   */\n  forceFallback: boolean;\n  /**\n   * Additional styles which will be merged with those defined by this component.\n   * Please note that some styles are not possible to override, in particular:\n   *   - object-fit: cover (when the fallback is not used)\n   *   - position: relative and overflow: hidden (when the fallback is used)\n   */\n  style: CSSProperties;\n  /**\n   * Use this to set a custom className.\n   */\n  className: string;\n  /**\n   * videoOptions will be passed as props to the <video/>.\n   */\n  videoOptions: object;\n  /**\n   * If set, an event listener on window-resize is added when the Fallback is used.\n   * It will re-evaluate the aspect-ratio and update the styles if necessary.\n   * This has no effect if the fallback is not used.\n   * The classic example where it makes sense to use this is when using a background video.\n   * If you need to react to different events to re-measure the aspect-ratio\n   * please see the onFallbackDidMount prop.\n   * default: false\n   */\n  remeasureOnWindowResize: boolean;\n  /**\n   * Will be executed when the Fallback is mounted.\n   * The only parameter is a function, which can be used to force a re-measuring,\n   * for example after the size of the surrounding container has changed.\n   * Please note that this will only be invoked if the fallback is used, that is in IE.\n   * See ResizableCoverExample for an example implementation.\n   */\n  onFallbackDidMount: (updateContainerRatio: () => void) => void;\n  /**\n   * Will be executed before the Fallback unmounts.\n   * You probably want to use this to clear any event-listeners added in onFallbackDidMount.\n   */\n  onFallbackWillUnmount: () => void;\n};\n\n/*\n * this component is a simple wrapper around <video/> that displays the video filling\n * the container, while preserving it's aspect ratio\n * this is analogous to background-size: cover for background images\n * and very easy to achieve with the css property object-fit: cover\n * unfortunately object-fit is not implemented in IE so a fallback will be used\n *\n * IF YOU DO NOT HAVE TO SUPPORT IE, you probably do not need this component\n * just have a look at the styles for the non-fallback implementation\n */\nclass VideoCover extends Component<Props> {\n  static defaultProps = {\n    forceFallback: false,\n    remeasureOnWindowResize: false,\n  };\n\n  render() {\n    const style: CSSProperties = {\n      width: \"100%\",\n      height: \"100%\",\n      ...this.props.style,\n      objectFit: \"cover\",\n    };\n    if (\n      this.props.forceFallback ||\n      (typeof window !== \"undefined\" &&\n        /MSIE|Trident|Edge/.test(window.navigator.userAgent))\n    ) {\n      return <CoverFallback {...this.props} />;\n    }\n    return (\n      <video\n        className={this.props.className}\n        style={style}\n        {...this.props.videoOptions}\n      />\n    );\n  }\n}\n\nexport default VideoCover;\n"],"names":["VideoCoverFallback","props","state","innerRatio","outerRatio","updateContainerRatio","_this","bind","updateVideoRatio","initEventListeners","removeEventListeners","componentDidMount","this","onFallbackDidMount","remeasureOnWindowResize","componentWillReceiveProps","nextProps","componentWillUnmount","onFallbackWillUnmount","containerRef","getBoundingClientRect","setState","width","height","window","addEventListener","removeEventListener","render","style","position","top","bottom","left","right","margin","outerStyle","overflow","React","ref","element","_this2","className","onLoadedData","event","currentTarget","videoWidth","videoHeight","videoOptions","Component","VideoCover","objectFit","forceFallback","test","navigator","userAgent","CoverFallback"],"mappings":"ikBASqBA,yBACPC,8BACJA,uBA+DmC,OA9DpCC,MAAQ,CACXC,WAAY,EACZC,WAAY,KAETC,qBAAuBC,EAAKD,qBAAqBE,aACjDC,iBAAmBF,EAAKE,iBAAiBD,aACzCE,mBAAqBH,EAAKG,mBAAmBF,aAC7CG,qBAAuBJ,EAAKI,qBAAqBH,+CAGxDI,kBAAA,gBACON,uBACwC,mBAAlCO,KAAKX,MAAMY,yBACfZ,MAAMY,mBAAmBD,KAAKP,sBAEjCO,KAAKX,MAAMa,8BACRL,wBAITM,0BAAA,SAA0BC,GAEtBA,EAAUF,0BAA4BF,KAAKX,MAAMa,0BAE7CE,EAAUF,6BACPL,0BAEAC,2BAKXO,qBAAA,gBACOP,uBAC2C,mBAArCE,KAAKX,MAAMiB,4BACfjB,MAAMiB,2BAIfb,qBAAA,cACMO,KAAKO,aAAc,OACKP,KAAKO,aAAaC,6BACvCC,SAAS,CACZjB,aAFMkB,QAAOC,aAOnBf,iBAAA,SAAiBc,EAAeC,QACzBF,SAAS,CACZlB,WAAYmB,EAAQC,OAIxBd,mBAAA,WACEe,OAAOC,iBAAiB,SAAUb,KAAKP,yBAGzCK,qBAAA,WACEc,OAAOE,oBAAoB,SAAUd,KAAKP,yBAW5CsB,OAAA,wBACqCf,KAAKV,MAAhCC,IAAAA,WAAYC,IAAAA,WACdwB,EAAuB,CAC3BN,MAAOnB,EAAaC,EAAa,OAAS,OAC1CmB,OAAQpB,EAAaC,EAAa,OAAS,OAK3CyB,SAAU,WACVC,KAAM,KACNC,QAAS,KACTC,MAAO,KACPC,OAAQ,KACRC,OAAQ,QAGJC,KACJb,MAAO,OACPC,OAAQ,QACLX,KAAKX,MAAM2B,OACdC,SAAU,WACVO,SAAU,kBAIVC,uBACET,MAAOO,EACPG,IAAK,SAACC,GACJC,EAAKrB,aAAeoB,GAEtBE,UAAW7B,KAAKX,MAAMwC,WAEtBJ,uCACEK,aAAc,SAACC,GACbH,EAAKhC,iBACHmC,EAAMC,cAAcC,WACpBF,EAAMC,cAAcE,cAGxBlB,MAAOA,GACHhB,KAAKX,MAAM8C,oBAlHuBC,aCsD1CC,0FAMJtB,OAAA,eACQC,KACJN,MAAO,OACPC,OAAQ,QACLX,KAAKX,MAAM2B,OACdsB,UAAW,iBAGXtC,KAAKX,MAAMkD,eACQ,oBAAX3B,QACN,oBAAoB4B,KAAK5B,OAAO6B,UAAUC,WAErCjB,gBAACkB,mBAAkB3C,KAAKX,QAG/BoC,uCACEI,UAAW7B,KAAKX,MAAMwC,UACtBb,MAAOA,GACHhB,KAAKX,MAAM8C,mBAxBEC,aAChBC,eAAe,CACpBE,eAAe,EACfrC,yBAAyB"}